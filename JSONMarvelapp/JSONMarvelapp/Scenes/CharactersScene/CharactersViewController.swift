//
//  CharactersViewController.swift
//  JSONMarvelapp
//
//  Created by Iván Díaz Molina on 2/12/20.
//  Copyright (c) 2020 IDIAZM. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CharactersDisplayLogic: class {
    func setupView(viewModel: Characters.SetupView.ViewModel)
    func displayCharacters()
    func displayDetailsOfCharacter(viewModel: Characters.DidSelectedItem.ViewModel)
}

class CharactersViewController: BaseViewController, CharactersDisplayLogic {
    
    var interactor: CharactersBusinessLogic?
    var router: (NSObjectProtocol & CharactersRoutingLogic & CharactersDataPassing)?
    
    // MARK: IBOutlets
    @IBOutlet weak var charactersCollectionView: UICollectionView!
    
    // LETS AND VARS
    let CELL_SIZE: CGFloat = 200
    let COLUMNS: CGFloat = 2
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CharactersInteractor()
        let presenter = CharactersPresenter()
        let router = CharactersRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        interactor?.setupView()
    }

    func setupView(viewModel: Characters.SetupView.ViewModel) {
        
        // NavigationController
        self.navigationItem.title = viewModel.title;
        
        //CollectionView
        charactersCollectionView.register(CharacterCollectionViewCell.self)
        charactersCollectionView.delegate = self
        charactersCollectionView.dataSource = self
        
        let flowLayout = UICollectionViewFlowLayout()
        flowLayout.itemSize = CGSize(width: UIScreen.main.bounds.width/COLUMNS, height: CELL_SIZE)
        flowLayout.sectionInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        flowLayout.minimumInteritemSpacing = 0.0
        flowLayout.minimumLineSpacing = 0
        charactersCollectionView.collectionViewLayout = flowLayout
    }
    
    func displayCharacters() {
        reloadData(collectionView: charactersCollectionView)
    }
    
    func displayDetailsOfCharacter(viewModel: Characters.DidSelectedItem.ViewModel) {
        router?.routerToDetails(segue: nil)
    }
}

// MARK: UICollectionViewDelegate, UICollectionViewDatasource
extension CharactersViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return interactor?.getCharactersCount() ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CharacterCollectionViewCell.cellIdentifier, for: indexPath) as? CharacterCollectionViewCell else {
            print("Error to cast UICollectionViewCell to PhotoCollectionViewCell")
            return UICollectionViewCell()
        }
        
        guard let data = interactor?.getCharacterCellFor(index: indexPath.row) else {
            print("Error to get PhotoCollectionViewCell from index")
            return UICollectionViewCell()
        }

        cell.updateUI(model: data)
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        interactor?.didSelectedItemAt(index: indexPath.row)
    }
}
