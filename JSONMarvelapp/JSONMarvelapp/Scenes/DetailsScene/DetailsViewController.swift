//
//  DetailsViewController.swift
//  JSONMarvelapp
//
//  Created by Iván Díaz Molina on 3/12/20.
//  Copyright (c) 2020 IDIAZM. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SDWebImage

protocol DetailsDisplayLogic: class {
    func setupView(viewModel: Details.SetupView.ViewModel)
}

class DetailsViewController: UIViewController, DetailsDisplayLogic {
    
    var interactor: DetailsBusinessLogic?
    var router: (NSObjectProtocol & DetailsRoutingLogic & DetailsDataPassing)?
    
    // MARK: IBOutlets
    @IBOutlet weak var characterNameLabel: UILabel!
    @IBOutlet weak var characterImageView: UIImageView!
    @IBOutlet weak var detailsTableView: UITableView!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = DetailsInteractor()
        let presenter = DetailsPresenter()
        let router = DetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        interactor?.setupView()
    }
    
    // MARK: DetailsDisplayLogic
    
    func setupView(viewModel: Details.SetupView.ViewModel) {
        
        // NavigationController
        self.navigationItem.title = viewModel.characterName
        
        // Character Image
        characterImageView.sd_setImage(with: viewModel.url) { [weak self] (image, error, cacheType, url) in
            guard let image = image else { return }
            
            self?.characterImageView.image = image
            self?.characterImageView.backgroundColor = .clear
        }
        
        // Character Label
        characterNameLabel.text = viewModel.characterName
        
        // TableView
        detailsTableView.register(SimpleTableViewCell.self)
        detailsTableView.delegate = self
        detailsTableView.dataSource = self
    }
}

// MARK: UITableviewDelegate and UITableViewDataSource

extension DetailsViewController: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return interactor?.getSectionsCount() ?? 0
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        return section == 0 ?
        interactor?.getSeriesCount() ?? 0 :
        interactor?.getComicsCount() ?? 0
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        
        return section == 0 ? "details.section.series".localized : "details.section.comics".localized
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        guard let cell = tableView.dequeueReusableCell(withIdentifier: SimpleTableViewCell.cellIdentifier) as? SimpleTableViewCell else {
            print("Error to cast TableViewCell to SimpleTableViewCell")
            return UITableViewCell()
        }
        
        guard let data = interactor?.getDataCellFor(index: indexPath.row, section: indexPath.section) else {
            print("Error to get SimpleTableViewCell from index")
            return UITableViewCell()
        }
        
        cell.updateUI(model: data)
        
        return cell
    }
}
