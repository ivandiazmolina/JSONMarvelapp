//
//  SeriesViewController.swift
//  JSONMarvelapp
//
//  Created by Iván Díaz Molina on 2/12/20.
//  Copyright (c) 2020 IDIAZM. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SeriesDisplayLogic: class {
    func setupView(viewModel: Series.SetupView.ViewModel)
    func displayCharacters()
}

class SeriesViewController: BaseViewController, SeriesDisplayLogic {
    
    var interactor: SeriesBusinessLogic?
    var router: (NSObjectProtocol & SeriesRoutingLogic & SeriesDataPassing)?
    
    // MARK: IBOutlets
    @IBOutlet weak var seriesTableView: IntrinsicHeightTableView!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = SeriesInteractor()
        let presenter = SeriesPresenter()
        let router = SeriesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        if let parent = parent?.parent as? MainViewController {
            parent.mainDelegate = self
        }
        
        interactor?.setupView()
    }
    
    func setupView(viewModel: Series.SetupView.ViewModel) {
        
        // NavigationController
        self.navigationItem.title = viewModel.title;
        
        // TableView
        seriesTableView.register(SerieTableViewCell.self)
        seriesTableView.delegate = self
        seriesTableView.dataSource = self
    }
    
    func displayCharacters() {
        router?.routerToCharacters(segue: nil)
    }
}

// MARK: UITableviewDelegate and UITableViewDataSource

extension SeriesViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return interactor?.getSeriesCount() ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        guard let cell = tableView.dequeueReusableCell(withIdentifier: SerieTableViewCell.cellIdentifier) as? SerieTableViewCell else {
            print("Error to cast TableViewCell to SerieTableViewCell")
            return UITableViewCell()
        }
        
        guard let data = interactor?.getSerieCellFor(index: indexPath.row) else {
            print("Error to get SerieTableViewCell from index")
            return UITableViewCell()
        }
        
        cell.updateUI(model: data)
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        
        interactor?.didSelectedItemAt(index: indexPath.row)
    }
}

// MARK: MainDelegate

extension SeriesViewController: MainDelegate {
   
    func fetchedSeries(series: [Serie]) {
        reloadData(tableView: seriesTableView)
    }
}
