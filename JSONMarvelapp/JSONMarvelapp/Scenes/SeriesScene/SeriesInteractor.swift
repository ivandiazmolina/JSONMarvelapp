//
//  SeriesInteractor.swift
//  JSONMarvelapp
//
//  Created by Iván Díaz Molina on 2/12/20.
//  Copyright (c) 2020 IDIAZM. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SeriesBusinessLogic {
    func setupView()
    func didSelectedItemAt(index: Int)
    
    // MARK: Series
    func setSeries(_ series: [Serie])
    func getSeriesCount() -> Int
    func getSerieCellFor(index: Int) -> Series.Models.SerieCellModel
}

protocol SeriesDataStore {
    var series: [Serie]? { get set }
    var selectedSerie: Serie? { get set }
}

class SeriesInteractor: SeriesBusinessLogic, SeriesDataStore {
    
    var presenter: SeriesPresentationLogic?
    var worker: SeriesWorker?
    
    var series: [Serie]?
    var selectedSerie: Serie?
    
    func setupView() {
        
        let response = Series.SetupView.Response(title: "series.title".localized)
        
        presenter?.setupView(response: response)
    }
    
    func didSelectedItemAt(index: Int) {
        
        guard let serie = series?.getElement(index) else { return }
        
        selectedSerie = serie
        
        presenter?.presentCharacters()
    }
    
    // MARK: Series
    
    func setSeries(_ series: [Serie]) {
        self.series = series
    }
    
    func getSeriesCount() -> Int {
        return series?.count ?? 0
    }
    
    func getSerieCellFor(index: Int) -> Series.Models.SerieCellModel {
        guard let serie = series?.getElement(index) else { return Series.Models.SerieCellModel()
        }
        
        return Series.Models.SerieCellModel(serie: serie)
    }
}
