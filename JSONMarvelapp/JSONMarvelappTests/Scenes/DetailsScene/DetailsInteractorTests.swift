//
//  DetailsInteractorTests.swift
//  JSONMarvelapp
//
//  Created by Iván Díaz Molina on 4/12/20.
//  Copyright (c) 2020 IDIAZM. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import JSONMarvelapp
import XCTest

class DetailsInteractorTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: DetailsInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupDetailsInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupDetailsInteractor() {
        sut = DetailsInteractor()
    }
    
    // MARK: Test doubles
    
    class DetailsPresentationLogicSpy: DetailsPresentationLogic {
        
        var setupViewCalled = false
        
        func setupView(response: Details.SetupView.Response) {
            setupViewCalled = true
        }
        
    }
    
    // MARK: Tests
    
    func testSetupView() {
        // Given
        let spy = DetailsPresentationLogicSpy()
        sut.presenter = spy
        
        // When
        sut.setupView()
        
        // Then
        XCTAssertTrue(spy.setupViewCalled, "setupView should ask the presenter to setupViewCalled")
    }
    
    func testGetSeriesCount() {
        // Given
        let spy = DetailsPresentationLogicSpy()
        sut.presenter = spy
        
        // When
        sut.character = createTestActors()
        let seriesCount = sut.getSeriesCount()
        
        // Then
        XCTAssertEqual(sut.character?.series?.items?.count, seriesCount, "getSeriesCount check count of series")
    }
    
    func testGetComicsCount() {
        // Given
        let spy = DetailsPresentationLogicSpy()
        sut.presenter = spy
        
        // When
        sut.character = createTestActors()
        let comicsCount = sut.getComicsCount()
        
        // Then
        XCTAssertEqual(sut.character?.comics?.items?.count, comicsCount, "getComicsCount check count of comics")
    }
    
    func testGetSectionsCount() {
        // Given
        let spy = DetailsPresentationLogicSpy()
        sut.presenter = spy
        
        // When
        let sectionsCount = sut.getSectionsCount()
        
        // Then
        XCTAssertEqual(sectionsCount, 2, "getComicsCount check if sections are 2")
    }
    
    func testGetDataCellFor() {
        // Given
        let spy = DetailsPresentationLogicSpy()
        sut.presenter = spy
        
        // When
        let model1 = sut.getDataCellFor(index: 0, section: 0)
        let model2 = sut.getDataCellFor(index: 0, section: 1)
        
        // Then
        XCTAssertEqual(model1.type, Details.Models.TypeCell.serie, "getDataCellFor check if sections 0 is type of serie")
        XCTAssertEqual(model2.type, Details.Models.TypeCell.comic, "getDataCellFor check if sections 1 is type of comic")
    }
    
    // MARK: private methods
    fileprivate func createTestActors() -> Actor {
        var actor = Actor()
        
        actor.id = 1
        actor.name = "name"
        actor.series = createTestItems(name: "serie")
        actor.comics = createTestItems(name: "comic")
        
        actor.thumbnail = Thumbail()
        
        return actor
    }
    
    fileprivate func createTestItems(name: String) -> Items {
        
        var item = Items()
        item.items = []
        
        for _ in 0...4 {
            var resource = ResourceURI()
            resource.name = name
            resource.resourceURI = "resource uri"
            
            item.items?.append(resource)
        }
        
        return item
    }
}
