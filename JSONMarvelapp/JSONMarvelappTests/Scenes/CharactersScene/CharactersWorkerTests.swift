//
//  CharactersWorkerTests.swift
//  JSONMarvelapp
//
//  Created by Iván Díaz Molina on 4/12/20.
//  Copyright (c) 2020 IDIAZM. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import JSONMarvelapp
import XCTest

class CharactersWorkerTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: CharactersWorker!
    static var testActors: [Actor]!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupCharactersWorker()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupCharactersWorker() {
        sut = CharactersWorker()
        initSeriesMocks()
    }
    
    /// method that creates mocks objects of series
    fileprivate func initSeriesMocks() {
        
        CharactersWorkerTests.testActors = []
        
        for i in 0...9 {
            var actor = Actor()
            actor.id = i
            actor.name = "name \(i)"
            CharactersWorkerTests.testActors.append(actor)
        }
    }
    
    // MARK: Test doubles
    
    class CharactersMemStoreSpy: APICharacterRepository {
        
        // MARK: Method call expectations
        var getCharactersCalled = false
        
        override func getCharacters(for serie: Serie, completion: @escaping ([Actor]) -> Void) {
            getCharactersCalled = true
            completion(CharactersWorkerTests.testActors)
        }
    }
    
    // MARK: Tests
    
    func testGetCharacters() {
        
        // Given
        let seriesMemStoreSpy = CharactersMemStoreSpy()
        
        // When
        var fetchedActors = [Actor]()
        
        seriesMemStoreSpy.getCharacters(for: Serie(), completion: { (actors) in
            let expect = self.expectation(description: "Wait for getCharacters() to return")
            fetchedActors = actors
            expect.fulfill()
        })
        
        self.waitForExpectations(timeout: 3.0)
        
        // Then
        XCTAssertTrue(seriesMemStoreSpy.getCharactersCalled, "Calling getCharacters() should ask the data store for a list of actors")
        XCTAssertEqual(fetchedActors.count, CharactersWorkerTests.testActors.count, "Calling getCharacters() should ask the data store for a list of actors")
    }
}
