//
//  CharactersPresenterTests.swift
//  JSONMarvelapp
//
//  Created by Iván Díaz Molina on 4/12/20.
//  Copyright (c) 2020 IDIAZM. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import JSONMarvelapp
import XCTest

class CharactersPresenterTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: CharactersPresenter!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupCharactersPresenter()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupCharactersPresenter() {
        sut = CharactersPresenter()
    }
    
    // MARK: Test doubles
    
    class CharactersDisplayLogicSpy: CharactersDisplayLogic {
        
        var setupViewCalled = false
        var displayCharactersCalled = false
        var displayDetailsOfCharacterCalled = false
        var displayEmptyStateCalled = false
        
        func setupView(viewModel: Characters.SetupView.ViewModel) {
            setupViewCalled = true
        }
        
        func displayCharacters() {
            displayCharactersCalled = true
        }
        
        func displayDetailsOfCharacter(viewModel: Characters.DidSelectedItem.ViewModel) {
            displayDetailsOfCharacterCalled = true
        }
        
        func displayEmptyState() {
            displayEmptyStateCalled = true
        }
        
    }
    
    // MARK: Tests
    
    func testSetupView() {
        // Given
        let spy = CharactersDisplayLogicSpy()
        sut.viewController = spy
        
        // When
        sut.setupView(response: .init())
        
        // Then
        XCTAssertTrue(spy.setupViewCalled, "setupView should ask the view controller to setupView")
    }
    
    func testPresentCharacters() {
        // Given
        let spy = CharactersDisplayLogicSpy()
        sut.viewController = spy
        
        // When
        sut.presentCharacters()
        
        // Then
        XCTAssertTrue(spy.displayCharactersCalled, "presentCharacters should ask the view controller to displayCharacters")
    }
    
    func testPresentDetails() {
        // Given
        let spy = CharactersDisplayLogicSpy()
        sut.viewController = spy
        
        // When
        sut.presentDetails(response: .init())
        
        // Then
        XCTAssertTrue(spy.displayDetailsOfCharacterCalled, "presentDetails should ask the view controller to displayDetailsOfCharacter")
    }
    
    func testPresentEmptyView() {
        // Given
        let spy = CharactersDisplayLogicSpy()
        sut.viewController = spy
        
        // When
        sut.presentEmptyView()
        
        // Then
        XCTAssertTrue(spy.displayEmptyStateCalled, "presentEmptyView should ask the view controller to displayEmptyState")
    }
    
    func testDisplayLoading() {
        // Given
        let spy = CharactersDisplayLogicSpy()
        sut.viewController = spy
        
        // When
        sut.displayLoading(true)
    }
}
